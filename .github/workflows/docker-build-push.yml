name: Docker Build, Scan and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: docker build -t fafiorim/firefly .
      
      - name: Save Docker image
        run: docker save fafiorim/firefly:latest -o firefly.tar
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: firefly.tar
          retention-days: 90

  push-to-ecr:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Create ECR repository if not exists
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || \
          aws ecr create-repository \
            --repository-name ${ECR_REPOSITORY} \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
      
      - name: Load and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker load -i firefly.tar
          docker tag fafiorim/firefly:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  vulnerabilities-scan:
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Scan for Vulnerabilities
        run: tmas scan docker-archive:firefly.tar -V > vulnerability-scan-results.json
      
      - name: Analyze vulnerabilities and create summary
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          
          echo "## 🔍 Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "### Overview" >> $GITHUB_STEP_SUMMARY
          
          CRITICAL=$(jq '.vulnerabilities.criticalCount' vulnerability-scan-results.json)
          HIGH=$(jq '.vulnerabilities.highCount' vulnerability-scan-results.json)
          MEDIUM=$(jq '.vulnerabilities.mediumCount' vulnerability-scan-results.json)
          LOW=$(jq '.vulnerabilities.lowCount' vulnerability-scan-results.json)
          
          echo "| Severity  | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Critical  | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
          echo "| High      | $HIGH |" >> $GITHUB_STEP_SUMMARY
          echo "| Medium    | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
          echo "| Low       | $LOW |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "### ❌ Critical Vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            jq -r '.vulnerabilities.findings[] | select(.severity=="CRITICAL") | "- "+.id+": "+.description' vulnerability-scan-results.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "Critical vulnerabilities found! Failing..."
            exit 1
          else
            echo "### ✅ No Critical Vulnerabilities Found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload vulnerability logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-scan-results
          path: vulnerability-scan-results.json
          retention-days: 90

  malware-scan:
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Create results directory
        run: mkdir -p scan-results
      
      - name: Scan for Malware
        run: |
          tmas scan docker-archive:firefly.tar -M > scan-results/malware-scan-results.json
          cp scan-results/malware-scan-results.json .
      
      - name: Analyze malware scan and create summary
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          
          echo "## 🦠 Malware Scan Results" >> $GITHUB_STEP_SUMMARY
          
          CODE=$(jq '.malware.scanResult' scan-results/malware-scan-results.json)
          COUNT=$(jq '.malware.findings | length' scan-results/malware-scan-results.json)
          
          echo "### Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Status | $([ "$CODE" -eq 0 ] && echo "✅ Clean" || echo "❌ Malware Detected") |" >> $GITHUB_STEP_SUMMARY
          echo "| Findings | $COUNT |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CODE" -gt 0 ]; then
            echo "### ❌ Malware Findings" >> $GITHUB_STEP_SUMMARY
            echo "| File | Size | Malware Name |" >> $GITHUB_STEP_SUMMARY
            echo "|------|------|--------------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.malware.findings[] | "| \(.fileName) | \(.fileSize) bytes | \(.foundMalwares[0].malwareName) |"' scan-results/malware-scan-results.json >> $GITHUB_STEP_SUMMARY
            
            # Detailed findings for debugging
            echo "### Detailed Scan Information" >> $GITHUB_STEP_SUMMARY
            SCANNER_VERSION=$(jq -r '.malware.scannerVersion' scan-results/malware-scan-results.json)
            SCAN_ID=$(jq -r '.malware.scanID' scan-results/malware-scan-results.json)
            LAYER_DIGEST=$(jq -r '.malware.findings[0].layerDigest' scan-results/malware-scan-results.json)
            
            echo "- Scanner Version: $SCANNER_VERSION" >> $GITHUB_STEP_SUMMARY
            echo "- Scan ID: $SCAN_ID" >> $GITHUB_STEP_SUMMARY
            echo "- Layer Info: $LAYER_DIGEST" >> $GITHUB_STEP_SUMMARY
            
            echo "Malware detected! Failing..."
            exit 1
          else
            echo "### ✅ No Malware Detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload malware logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: malware-scan-results
          path: |
            scan-results/malware-scan-results.json
            malware-scan-results.json
          retention-days: 90

  secrets-scan:
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Scan for Secrets
        run: tmas scan docker-archive:firefly.tar -S > secrets-scan-results.json
      
      - name: Analyze secrets and create summary
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          
          echo "## 🔒 Secrets Scan Results" >> $GITHUB_STEP_SUMMARY
          
          SECRETS_COUNT=$(jq '.secrets.unmitigatedFindingsCount' secrets-scan-results.json)
          
          echo "### Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unmitigated Secrets | $SECRETS_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | $([ "$SECRETS_COUNT" -eq 0 ] && echo "✅ Clean" || echo "❌ Secrets Found") |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$SECRETS_COUNT" -gt 0 ]; then
            echo "### ❌ Secret Details" >> $GITHUB_STEP_SUMMARY
            echo "| Rule ID | Location |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|-----------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.secrets.findings.unmitigated[]? | "| \(.ruleID) | \(.location.path) |"' secrets-scan-results.json >> $GITHUB_STEP_SUMMARY
            
            echo "Secrets detected! Failing..."
            exit 1
          else
            echo "### ✅ No Secrets Found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload secrets logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scan-results
          path: secrets-scan-results.json
          retention-days: 90

  sbom-scan:
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Generate SBOM
        run: tmas scan docker-archive:firefly.tar -V --saveSBOM > sbom-scan-results.json
      
      - name: Upload SBOM logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-scan-results
          path: sbom-scan-results.json
          retention-days: 90
      
      - name: Upload SBOM file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-report
          path: SBOM_*.json
          retention-days: 90

  deploy-to-eks:
    needs: [vulnerabilities-scan, malware-scan, secrets-scan, sbom-scan]
    if: |
      always() &&
      needs.vulnerabilities-scan.result != 'failure' &&
      needs.malware-scan.result != 'failure' &&
      needs.secrets-scan.result != 'failure' &&
      needs.sbom-scan.result != 'failure'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: List available EKS clusters
        run: aws eks list-clusters
      
      - name: Check required variables
        run: |
          if [ -z "${{ vars.EKS_CLUSTER_NAME }}" ]; then
            echo "Error: EKS_CLUSTER_NAME variable is not set"
            exit 1
          fi
          
      - name: Extract cluster name and update kube config
        run: |
          FULL_CLUSTER_NAME="${{ vars.EKS_CLUSTER_NAME }}"
          CLUSTER_NAME=$(echo $FULL_CLUSTER_NAME | cut -d'@' -f2 | cut -d'.' -f1)
          echo "Using cluster name: $CLUSTER_NAME"
          aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ secrets.AWS_REGION }}
      
      - name: Verify cluster access
        run: |
          kubectl cluster-info
          kubectl config current-context
      
      - name: Get ECR registry
        id: ecr
        run: |
          ECR_REGISTRY=$(aws ecr describe-registry --query registryId --output text)
          echo "registry=${ECR_REGISTRY}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_OUTPUT

      - name: Check for k8s manifests
        run: |
          if [ ! -f "k8s/deployment.yaml" ] || [ ! -f "k8s/service.yaml" ]; then
            echo "Error: Required Kubernetes manifests not found in k8s/ directory"
            echo "Please ensure both deployment.yaml and service.yaml exist in the k8s/ directory"
            exit 1
          fi

      - name: Update deployment image
        env:
          ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          echo "Updating deployment to use image: $ECR_REGISTRY/$ECR_REPOSITORY:latest"
          sed -i "s|image:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:latest|" k8s/deployment.yaml
          cat k8s/deployment.yaml
          
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl rollout status deployment/nginx-deployment
          
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Deployments" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          kubectl get deployments -o wide >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "### Pods" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          kubectl get pods -o wide >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "### Services" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          kubectl get services -o wide >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          # Get LoadBalancer URL if available
          LB_HOSTNAME=$(kubectl get service nginx-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          if [ ! -z "$LB_HOSTNAME" ]; then
            echo "### 🌐 Access URL" >> $GITHUB_STEP_SUMMARY
            echo "Application is accessible at: http://${LB_HOSTNAME}" >> $GITHUB_STEP_SUMMARY
            echo "Region: ${{ secrets.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          fi
