name: Docker Build, Scan and Deploy

on:
  push:
    branches:
      - main
      - fafiorim-patch-1

  pull_request:
    branches:
      - main
      - fafiorim-patch-1

env:
  SECURITY_MODE: ${{ vars.SECURITY_MODE || 'protect' }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: docker build -t fafiorim/bytevault .
      
      - name: Save Docker image
        run: docker save fafiorim/bytevault:latest -o bytevault.tar
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: bytevault.tar
          retention-days: 90

  push-to-ecr:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Create ECR repository if not exists
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || \
          aws ecr create-repository \
            --repository-name ${ECR_REPOSITORY} \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
      
      - name: Load and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker load -i bytevault.tar
          docker tag fafiorim/bytevault:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  vulnerabilities-scan:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Security mode notice
        run: |
          echo "Running in ${{ env.SECURITY_MODE }} mode - $([ "${{ env.SECURITY_MODE }}" = "protect" ] && echo "will fail on findings" || echo "logging findings only")"

      - name: Scan for Vulnerabilities
        run: tmas scan docker-archive:bytevault.tar -V > vulnerability-scan-results.json
      
      - name: Analyze vulnerabilities and create summary
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          
          echo "## 🔍 Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "### Overview" >> $GITHUB_STEP_SUMMARY
          
          CRITICAL=$(jq '.vulnerabilities.criticalCount' vulnerability-scan-results.json)
          HIGH=$(jq '.vulnerabilities.highCount' vulnerability-scan-results.json)
          MEDIUM=$(jq '.vulnerabilities.mediumCount' vulnerability-scan-results.json)
          LOW=$(jq '.vulnerabilities.lowCount' vulnerability-scan-results.json)
          
          echo "| Severity  | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Critical  | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
          echo "| High      | $HIGH |" >> $GITHUB_STEP_SUMMARY
          echo "| Medium    | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
          echo "| Low       | $LOW |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "### ❌ Critical Vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            jq -r '.vulnerabilities.findings[] | select(.severity=="CRITICAL") | "- "+.id+": "+.description' vulnerability-scan-results.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ env.SECURITY_MODE }}" = "protect" ]; then
              echo "Critical vulnerabilities found in PROTECT mode! Failing..."
              exit 1
            else
              echo "Running in LOG mode - documenting findings only"
            fi
          else
            echo "### ✅ No Critical Vulnerabilities Found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload vulnerability logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-scan-results
          path: vulnerability-scan-results.json
          retention-days: 90

  malware-scan:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Create results directory
        run: mkdir -p scan-results
      
      - name: Scan for Malware
        run: |
          tmas scan docker-archive:bytevault.tar -M > scan-results/malware-scan-results.json
          cp scan-results/malware-scan-results.json .
      
      - name: Analyze malware scan and create summary
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          
          echo "## 🦠 Malware Scan Results" >> $GITHUB_STEP_SUMMARY
          
          CODE=$(jq '.malware.scanResult' scan-results/malware-scan-results.json)
          COUNT=$(jq '.malware.findings | length' scan-results/malware-scan-results.json)
          
          echo "### Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Status | $([ "$CODE" -eq 0 ] && echo "✅ Clean" || echo "❌ Malware Detected") |" >> $GITHUB_STEP_SUMMARY
          echo "| Findings | $COUNT |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CODE" -gt 0 ]; then
            echo "### ❌ Malware Findings" >> $GITHUB_STEP_SUMMARY
            echo "| File | Size | Malware Name |" >> $GITHUB_STEP_SUMMARY
            echo "|------|------|--------------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.malware.findings[] | "| \(.fileName) | \(.fileSize) bytes | \(.foundMalwares[0].malwareName) |"' scan-results/malware-scan-results.json >> $GITHUB_STEP_SUMMARY
            
            echo "### Detailed Scan Information" >> $GITHUB_STEP_SUMMARY
            SCANNER_VERSION=$(jq -r '.malware.scannerVersion' scan-results/malware-scan-results.json)
            SCAN_ID=$(jq -r '.malware.scanID' scan-results/malware-scan-results.json)
            LAYER_DIGEST=$(jq -r '.malware.findings[0].layerDigest' scan-results/malware-scan-results.json)
            
            echo "- Scanner Version: $SCANNER_VERSION" >> $GITHUB_STEP_SUMMARY
            echo "- Scan ID: $SCAN_ID" >> $GITHUB_STEP_SUMMARY
            echo "- Layer Info: $LAYER_DIGEST" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ env.SECURITY_MODE }}" = "protect" ]; then
              echo "Malware detected in PROTECT mode! Failing..."
              exit 1
            else
              echo "Running in LOG mode - documenting findings only"
            fi
          else
            echo "### ✅ No Malware Detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload malware logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: malware-scan-results
          path: |
            scan-results/malware-scan-results.json
            malware-scan-results.json
          retention-days: 90

  secrets-scan:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Scan for Secrets
        run: tmas scan docker-archive:bytevault.tar -S > secrets-scan-results.json
      
      - name: Analyze secrets and create summary
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          
          echo "## 🔒 Secrets Scan Results" >> $GITHUB_STEP_SUMMARY
          
          SECRETS_COUNT=$(jq '.secrets.unmitigatedFindingsCount' secrets-scan-results.json)
          
          echo "### Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unmitigated Secrets | $SECRETS_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | $([ "$SECRETS_COUNT" -eq 0 ] && echo "✅ Clean" || echo "❌ Secrets Found") |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$SECRETS_COUNT" -gt 0 ]; then
            echo "### ❌ Secret Details" >> $GITHUB_STEP_SUMMARY
            echo "| Rule ID | Location |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|-----------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.secrets.findings.unmitigated[]? | "| \(.ruleID) | \(.location.path) |"' secrets-scan-results.json >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ env.SECURITY_MODE }}" = "protect" ]; then
              echo "Secrets detected in PROTECT mode! Failing..."
              exit 1
            else
              echo "Running in LOG mode - documenting findings only"
            fi
          else
            echo "### ✅ No Secrets Found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload secrets logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scan-results
          path: secrets-scan-results.json
          retention-days: 90

  sbom-scan:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Generate SBOM
        run: tmas scan docker-archive:bytevault.tar -V --saveSBOM > sbom-scan-results.json
      
      - name: Upload SBOM logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-scan-results
          path: sbom-scan-results.json
          retention-days: 90
      
      - name: Upload SBOM file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-report
          path: SBOM_*.json
          retention-days: 90

  iaas-scan:
      needs: [vulnerabilities-scan, malware-scan, secrets-scan, sbom-scan]
      if: >
        always() && (
          ${{ vars.SECURITY_MODE != 'protect' }} || (
            needs.vulnerabilities-scan.result != 'failure' && 
            needs.malware-scan.result != 'failure' && 
            needs.secrets-scan.result != 'failure' && 
            needs.sbom-scan.result != 'failure'
          )
        )
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.11'
        
        - name: Install Python dependencies
          run: pip install requests
        
        - name: Set up Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: 1.5.0
        
        - name: Initialize Terraform
          run: |
            cd terraform
            terraform init -backend=false
        
        - name: Create Terraform variables file
          run: |
            cd terraform
            cat > terraform.tfvars << EOF
            aws_region = "us-east-1"
            environment = "production"
            ecr_repository_name = "bytevault"
            eks_cluster_name = "bytevault-cluster"
            vpc_id = "vpc-dummy-12345"
            subnet_ids = ["subnet-dummy1", "subnet-dummy2"]
            EOF
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ vars.AWS_REGION }}
        
        - name: Generate Terraform plan
          run: |
            cd terraform
            terraform plan -out=tfplan -refresh=false
            terraform show -json tfplan > tfplan.json
        
        - name: Scan Terraform template with Trend Micro Cloud Posture
          env:
            V1_API_TOKEN: ${{ secrets.TMAS_API_KEY }}
            V1_REGION: ${{ vars.V1_REGION || 'api.xdr.trendmicro.com' }}
          run: |
            python3 << 'EOF'
            import requests
            import json
            import os
            import sys
            
            # Read Terraform JSON plan
            terraform_file = 'terraform/tfplan.json'
            with open(terraform_file, 'r') as f:
                terraform_content = f.read()
            
            # API configuration
            url_base = f"https://{os.environ['V1_REGION']}"
            url_path = '/beta/cloudPosture/scanTemplate'
            token = os.environ['V1_API_TOKEN']
            
            headers = {
                'Authorization': 'Bearer ' + token,
                'Content-Type': 'application/json;charset=utf-8'
            }
            
            body = {
                'type': 'cloudformation-template',
                'content': terraform_content,
                'arguments': [
                    {
                        'name': 'template_type',
                        'value': 'terraform'
                    }
                ],
                'pseudoArguments': {
                    'awsRegion': os.environ.get('AWS_REGION', 'us-west-2'),
                    'awsAccountId': '123456789012'  # Dummy account ID for scanning
                }
            }
            
            print(f"🔍 Scanning Terraform plan: {terraform_file}")
            print(f"📡 API endpoint: {url_base}{url_path}")
            
            try:
                r = requests.post(url_base + url_path, headers=headers, json=body, timeout=120)
                
                print(f"\n📊 Response Status: {r.status_code}")
                
                if r.status_code == 200:
                    print("✅ Template scan completed successfully")
                    
                    if 'application/json' in r.headers.get('Content-Type', ''):
                        result = r.json()
                        print("\n📋 Scan Results:")
                        print(json.dumps(result, indent=2))
                        
                        # Save results to file
                        with open('terraform-scan-results.json', 'w') as f:
                            json.dump(result, f, indent=2)
                        
                        # Check for findings/issues
                        if 'findings' in result or 'issues' in result or 'violations' in result:
                            findings_count = len(result.get('findings', result.get('issues', result.get('violations', []))))
                            if findings_count > 0:
                                print(f"\n⚠️  Found {findings_count} security findings in template")
                                if os.environ.get('SECURITY_MODE', 'protect') == 'protect':
                                    print("❌ Template has security issues in PROTECT mode! Failing...")
                                    sys.exit(1)
                                else:
                                    print("📝 Running in LOG mode - documenting findings only")
                            else:
                                print("\n✅ No security findings detected")
                        else:
                            print("\n✅ Template passed security scan")
                    else:
                        print(r.text)
                elif r.status_code == 401:
                    print("❌ Authentication failed - check V1_API_TOKEN secret")
                    sys.exit(1)
                elif r.status_code == 400:
                    print("❌ Bad request - check template format")
                    print(r.text)
                    sys.exit(1)
                else:
                    print(f"⚠️  Unexpected response code: {r.status_code}")
                    print(r.text)
                    if os.environ.get('SECURITY_MODE', 'protect') == 'protect':
                        sys.exit(1)
                    
            except requests.exceptions.RequestException as e:
                print(f"❌ Request failed: {str(e)}")
                sys.exit(1)
            except Exception as e:
                print(f"❌ Error: {str(e)}")
                sys.exit(1)
            EOF
        
        - name: Create scan summary
          if: always()
          run: |
            echo "## 🏗️ IaaS Template Scan Results" >> $GITHUB_STEP_SUMMARY
            
            if [ -f terraform-scan-results.json ]; then
              echo "### Overview" >> $GITHUB_STEP_SUMMARY
              echo "- **Template**: terraform/main.tf" >> $GITHUB_STEP_SUMMARY
              echo "- **Scanner**: Trend Micro Cloud Posture" >> $GITHUB_STEP_SUMMARY
              echo "- **Status**: ✅ Scan completed" >> $GITHUB_STEP_SUMMARY
              
              # Try to parse and display findings if jq is available
              if command -v jq &> /dev/null; then
                FINDINGS=$(jq -r '.findings // [] | length' terraform-scan-results.json 2>/dev/null || echo "0")
                echo "- **Findings**: $FINDINGS" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "⚠️ No scan results file generated" >> $GITHUB_STEP_SUMMARY
            fi
        
        - name: Upload terraform scan results
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: terraform-scan-results
            path: terraform-scan-results.json
            retention-days: 90

  deploy-to-k8s:
      needs: [vulnerabilities-scan, malware-scan, secrets-scan, sbom-scan, iaas-scan]
      if: >
        always() && (
          ${{ vars.SECURITY_MODE != 'protect' }} || (
            needs.vulnerabilities-scan.result != 'failure' && 
            needs.malware-scan.result != 'failure' && 
            needs.secrets-scan.result != 'failure' && 
            needs.sbom-scan.result != 'failure' &&
            needs.iaas-scan.result != 'failure'
          )
        )
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ vars.AWS_REGION }}

        - name: List available EKS clusters
          run: aws eks list-clusters
        
        - name: Check required variables
          run: |
            if [ -z "${{ vars.EKS_CLUSTER_NAME }}" ]; then
              echo "Error: EKS_CLUSTER_NAME variable is not set"
              exit 1
            fi
            
        - name: Extract cluster name and update kube config
          run: |
            FULL_CLUSTER_NAME="${{ vars.EKS_CLUSTER_NAME }}"
            CLUSTER_NAME=$(echo $FULL_CLUSTER_NAME | cut -d'@' -f2 | cut -d'.' -f1)
            echo "Using cluster name: $CLUSTER_NAME"
            aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ vars.AWS_REGION }}
        
        - name: Verify cluster access
          run: |
            kubectl cluster-info
            kubectl config current-context
        
        - name: Get ECR registry
          id: ecr
          run: |
            ECR_REGISTRY=$(aws ecr describe-registry --query registryId --output text)
            echo "registry=${ECR_REGISTRY}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com" >> $GITHUB_OUTPUT

        - name: Create Kubernetes ConfigMap and Secrets
          run: |
            # Create ConfigMap
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: bytevault-config
            data:
              admin-username: "${{ vars.ADMIN_USERNAME }}"
              user-username: "${{ vars.USER_USERNAME }}"
            EOF
            
            # Create Secrets
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Secret
            metadata:
              name: bytevault-secrets
            type: Opaque
            data:
              admin-password: $(echo -n "${{ secrets.ADMIN_PASSWORD }}" | base64)
              user-password: $(echo -n "${{ secrets.USER_PASSWORD }}" | base64)
            EOF

        - name: Update deployment configuration
          run: |
            cat <<EOF > k8s/deployment.yaml
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: bytevault-deployment
              labels:
                app: bytevault
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: bytevault
              template:
                metadata:
                  labels:
                    app: bytevault
                spec:
                  containers:
                  - name: bytevault
                    image: ${{ steps.ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
                    ports:
                    - containerPort: 3000
                    env:
                    - name: ADMIN_USERNAME
                      valueFrom:
                        configMapKeyRef:
                          name: bytevault-config
                          key: admin-username
                    - name: USER_USERNAME
                      valueFrom:
                        configMapKeyRef:
                          name: bytevault-config
                          key: user-username
                    - name: ADMIN_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: bytevault-secrets
                          key: admin-password
                    - name: USER_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: bytevault-secrets
                          key: user-password
                    volumeMounts:
                    - name: uploads-volume
                      mountPath: /app/uploads
                  volumes:
                  - name: uploads-volume
                    emptyDir: {}
            EOF

        - name: Deploy to Kubernetes
          run: |
            kubectl apply -f k8s/deployment.yaml
            kubectl apply -f k8s/service.yaml

        - name: Verify Deployment
          run: |
            echo "Checking deployments..."
            kubectl get deployments
            
            echo "Checking services..."
            kubectl get services
            
            echo "Checking pods..."
            kubectl get pods
            
            # Wait for deployment rollout
            kubectl rollout status deployment/bytevault-deployment --timeout=300s
            
            # Get pod name and check logs
            POD_NAME=$(kubectl get pods -l app=bytevault -o jsonpath="{.items[0].metadata.name}")
            echo "Checking pod logs..."
            kubectl logs $POD_NAME

        - name: Security mode summary
          run: |
            echo "## 🔐 Security Configuration" >> $GITHUB_STEP_SUMMARY
            echo "| Setting | Value | Description |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|---------|-------------|" >> $GITHUB_STEP_SUMMARY
            if [ "${{ env.SECURITY_MODE }}" = "protect" ]; then
              echo "| Mode | 🛡️ PROTECT | Pipeline will fail if vulnerabilities, malware, or secrets are found |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Mode | 📝 LOG | Pipeline will continue regardless of scan findings |" >> $GITHUB_STEP_SUMMARY
            fi
