name: Docker Build, Scan and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ###################################################################
  # 1) BUILD JOB
  ###################################################################
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: docker build -t fafiorim/firefly .
      
      - name: Save Docker image
        run: docker save fafiorim/firefly:latest -o firefly.tar
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: firefly.tar

  ###################################################################
  # 2) PUSH TO ECR
  ###################################################################
  push-to-ecr:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v3
        with:
          name: docker-image
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Create ECR repository if not exists
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || \
          aws ecr create-repository \
            --repository-name ${ECR_REPOSITORY} \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
      
      - name: Load and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker load -i firefly.tar
          docker tag fafiorim/firefly:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  ###################################################################
  # 3) VULNERABILITY SCAN
  ###################################################################
  vulnerabilities-scan:
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v3
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Scan for Vulnerabilities
        run: tmas scan docker-archive:firefly.tar -V > vulnerability-scan-results.json
      
      - name: Fail if critical vulnerabilities
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          CRITICAL=$(jq '.vulnerabilities.criticalCount' vulnerability-scan-results.json)
          if [ "$CRITICAL" -gt 0 ]; then
            echo "Critical vulnerabilities found! Failing..."
            exit 1
          fi

      - name: Upload vulnerability logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-scan-results
          path: vulnerability-scan-results.json

  ###################################################################
  # 4) MALWARE SCAN
  ###################################################################
  malware-scan:
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v3
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Scan for Malware
        run: tmas scan docker-archive:firefly.tar -M > malware-scan-results.json
      
      - name: Fail if malware is found
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          CODE=$(jq '.malware.scanResult' malware-scan-results.json)
          if [ "$CODE" -gt 0 ]; then
            echo "Malware detected! Failing..."
            exit 1
          fi

      - name: Upload malware logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: malware-scan-results
          path: malware-scan-results.json

  ###################################################################
  # 5) SECRETS SCAN
  ###################################################################
  secrets-scan:
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v3
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Scan for Secrets
        run: tmas scan docker-archive:firefly.tar -S > secrets-scan-results.json
      
      - name: Fail if secrets found
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          
          SECRETS_COUNT=$(jq '.secrets.unmitigatedFindingsCount' secrets-scan-results.json)
          echo "Secrets found: $SECRETS_COUNT"
          
          echo "=== SECRET DETAILS ==="
          jq -r '.secrets.findings.unmitigated[]? | "* Rule: \(.ruleID) | Path: \(.location.path)"' secrets-scan-results.json
          
          if [ "$SECRETS_COUNT" -gt 0 ]; then
            echo "Secrets detected! Failing..."
            exit 1
          fi

      - name: Upload secrets logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: secrets-scan-results
          path: secrets-scan-results.json

  ###################################################################
  # 6) SBOM SCAN
  ###################################################################
  sbom-scan:
    if: ${{ vars.SECURITY_ENABLED != 'false' }}
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v3
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Generate SBOM
        run: tmas scan docker-archive:firefly.tar -V --saveSBOM > sbom-scan-results.json
      
      - name: Upload SBOM logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sbom-scan-results
          path: sbom-scan-results.json
      
      - name: Upload SBOM file
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sbom-report
          path: SBOM_*.json

  ###################################################################
  # 7) DEPLOY TO EKS
  ###################################################################
  deploy-to-eks:
    needs: [vulnerabilities-scan, malware-scan, secrets-scan, sbom-scan]
    if: |
      always() &&
      needs.vulnerabilities-scan.result != 'failure' &&
      needs.malware-scan.result != 'failure' &&
      needs.secrets-scan.result != 'failure' &&
      needs.sbom-scan.result != 'failure'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
      
      - name: Update deployment image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          # Replace the image in the deployment file with the ECR image
          sed -i "s|image:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:latest|" k8s/deployment.yaml
          
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
