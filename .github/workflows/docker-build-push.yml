name: Docker Build, Scan and Deploy

on:
  push:
    branches:
      - main
      - fafiorim-patch-1

  pull_request:
    branches:
      - main
      - fafiorim-patch-1

env:
  SECURITY_ENABLED: ${{ vars.SECURITY_ENABLED || 'true' }}
  SECURITY_MODE: ${{ vars.SECURITY_MODE || 'protect' }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: docker build -t fafiorim/bytevault .
      
      - name: Save Docker image
        run: docker save fafiorim/bytevault:latest -o bytevault.tar
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: bytevault.tar
          retention-days: 90

  push-to-ecr:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Create ECR repository if not exists
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || \
          aws ecr create-repository \
            --repository-name ${ECR_REPOSITORY} \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
      
      - name: Load and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker load -i bytevault.tar
          docker tag fafiorim/bytevault:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  check-security-settings:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    outputs:
      run_scans: ${{ steps.check.outputs.run_scans }}
    steps:
      - name: Check security configuration
        id: check
        run: |
          if [[ "${{ env.SECURITY_ENABLED }}" == "true" ]]; then
            echo "Security scanning is enabled"
            echo "run_scans=true" >> $GITHUB_OUTPUT
          else
            echo "Security scanning is disabled"
            echo "run_scans=false" >> $GITHUB_OUTPUT
          fi
          
          echo "## 🔐 Security Configuration" >> $GITHUB_STEP_SUMMARY
          echo "| Setting | Value | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|---------|-------------|" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ env.SECURITY_ENABLED }}" == "true" ]]; then
            if [[ "${{ env.SECURITY_MODE }}" == "protect" ]]; then
              echo "| Status | ✅ ENABLED | Security scanning is active" >> $GITHUB_STEP_SUMMARY
              echo "| Mode | 🛡️ PROTECT | Pipeline will fail if issues are found |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Status | ✅ ENABLED | Security scanning is active" >> $GITHUB_STEP_SUMMARY
              echo "| Mode | 📝 LOG | Pipeline will continue regardless of findings |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Status | ⚠️ DISABLED | Security scanning is bypassed" >> $GITHUB_STEP_SUMMARY
            echo "| Mode | ➖ N/A | No security checks will be performed |" >> $GITHUB_STEP_SUMMARY
          fi

  vulnerabilities-scan:
    needs: check-security-settings
    if: needs.check-security-settings.outputs.run_scans == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Security mode notice
        run: |
          echo "Running in ${{ env.SECURITY_MODE }} mode - $([ "${{ env.SECURITY_MODE }}" = "protect" ] && echo "will fail on findings" || echo "logging findings only")"

      - name: Scan for Vulnerabilities
        continue-on-error: ${{ env.SECURITY_MODE != 'protect' }}
        run: tmas scan docker-archive:bytevault.tar -V > vulnerability-scan-results.json
      
      - name: Analyze vulnerabilities and create summary
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          
          echo "## 🔍 Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "### Overview" >> $GITHUB_STEP_SUMMARY
          
          CRITICAL=$(jq '.vulnerabilities.criticalCount' vulnerability-scan-results.json)
          HIGH=$(jq '.vulnerabilities.highCount' vulnerability-scan-results.json)
          MEDIUM=$(jq '.vulnerabilities.mediumCount' vulnerability-scan-results.json)
          LOW=$(jq '.vulnerabilities.lowCount' vulnerability-scan-results.json)
          
          echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
          echo "| High     | $HIGH |" >> $GITHUB_STEP_SUMMARY
          echo "| Medium   | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
          echo "| Low      | $LOW |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "### ❌ Critical Vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            jq -r '.vulnerabilities.findings[] | select(.severity=="CRITICAL") | "- "+.id+": "+.description' vulnerability-scan-results.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ No Critical Vulnerabilities Found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload vulnerability logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-scan-results
          path: vulnerability-scan-results.json
          retention-days: 90

  malware-scan:
    needs: check-security-settings
    if: needs.check-security-settings.outputs.run_scans == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Create results directory
        run: mkdir -p scan-results
      
      - name: Scan for Malware
        continue-on-error: ${{ env.SECURITY_MODE != 'protect' }}
        run: |
          tmas scan docker-archive:bytevault.tar -M > scan-results/malware-scan-results.json
          cp scan-results/malware-scan-results.json .
      
      - name: Analyze malware scan and create summary
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          
          echo "## 🦠 Malware Scan Results" >> $GITHUB_STEP_SUMMARY
          
          CODE=$(jq '.malware.scanResult' scan-results/malware-scan-results.json)
          COUNT=$(jq '.malware.findings | length' scan-results/malware-scan-results.json)
          
          echo "### Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Status | $([ "$CODE" -eq 0 ] && echo "✅ Clean" || echo "❌ Malware Detected") |" >> $GITHUB_STEP_SUMMARY
          echo "| Findings | $COUNT |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CODE" -gt 0 ]; then
            echo "### ❌ Malware Findings" >> $GITHUB_STEP_SUMMARY
            echo "| File | Size | Malware Name |" >> $GITHUB_STEP_SUMMARY
            echo "|------|------|--------------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.malware.findings[] | "| \(.fileName) | \(.fileSize) bytes | \(.foundMalwares[0].malwareName) |"' scan-results/malware-scan-results.json >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ No Malware Detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload malware logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: malware-scan-results
          path: |
            scan-results/malware-scan-results.json
            malware-scan-results.json
          retention-days: 90

  secrets-scan:
    needs: check-security-settings
    if: needs.check-security-settings.outputs.run_scans == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Scan for Secrets
        continue-on-error: ${{ env.SECURITY_MODE != 'protect' }}
        run: tmas scan docker-archive:bytevault.tar -S > secrets-scan-results.json
      
      - name: Analyze secrets and create summary
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          
          echo "## 🔒 Secrets Scan Results" >> $GITHUB_STEP_SUMMARY
          
          SECRETS_COUNT=$(jq '.secrets.unmitigatedFindingsCount' secrets-scan-results.json)
          
          echo "### Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unmitigated Secrets | $SECRETS_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | $([ "$SECRETS_COUNT" -eq 0 ] && echo "✅ Clean" || echo "❌ Secrets Found") |" >> $GITHUB_STEP_SUMMARY
          
          if [ "$SECRETS_COUNT" -gt 0 ]; then
            echo "### ❌ Secret Details" >> $GITHUB_STEP_SUMMARY
            echo "| Rule ID | Location |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|-----------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.secrets.findings.unmitigated[]? | "| \(.ruleID) | \(.location.path) |"' secrets-scan-results.json >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ No Secrets Found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload secrets logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scan-results
          path: secrets-scan-results.json
          retention-days: 90

  sbom-scan:
    needs: check-security-settings
    if: needs.check-security-settings.outputs.run_scans == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh
      
      - name: Set TMAS_API_KEY
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      
      - name: Generate SBOM
        continue-on-error: ${{ env.SECURITY_MODE != 'protect' }}
        run: tmas scan docker-archive:bytevault.tar -V --saveSBOM > sbom-scan-results.json
      
      - name: Upload SBOM logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-scan-results
          path: sbom-scan-results.json
          retention-days: 90
      
      - name: Upload SBOM file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-report
          path: SBOM_*.json
          retention-days: 90

  deploy-to-k8s:
        needs: [check-security-settings, vulnerabilities-scan, malware-scan, secrets-scan, sbom-scan]
        if: |
          always() && (
            needs.check-security-settings.outputs.run_scans != 'true' ||
            env.SECURITY_MODE != 'protect' ||
            (needs.vulnerabilities-scan.result == 'success' &&
            needs.malware-scan.result == 'success' &&
            needs.secrets-scan.result == 'success' &&
            needs.sbom-scan.result == 'success')
          )
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
          
          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ vars.AWS_REGION }}

          - name: List available EKS clusters
            run: aws eks list-clusters
          
          - name: Check required variables
            run: |
              if [ -z "${{ vars.EKS_CLUSTER_NAME }}" ]; then
                echo "Error: EKS_CLUSTER_NAME variable is not set"
                exit 1
              fi
              
          - name: Extract cluster name and update kube config
            run: |
              FULL_CLUSTER_NAME="${{ vars.EKS_CLUSTER_NAME }}"
              CLUSTER_NAME=$(echo $FULL_CLUSTER_NAME | cut -d'@' -f2 | cut -d'.' -f1)
              echo "Using cluster name: $CLUSTER_NAME"
              aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ vars.AWS_REGION }}
          
          - name: Verify cluster access
            run: |
              kubectl cluster-info
              kubectl config current-context
          
          - name: Get ECR registry
            id: ecr
            run: |
              ECR_REGISTRY=$(aws ecr describe-registry --query registryId --output text)
              echo "registry=${ECR_REGISTRY}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com" >> $GITHUB_OUTPUT

          - name: Create Kubernetes ConfigMap and Secrets
            run: |
              # Create ConfigMap
              cat <<EOF | kubectl apply -f -
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: bytevault-config
              data:
                admin-username: "${{ vars.ADMIN_USERNAME }}"
                user-username: "${{ vars.USER_USERNAME }}"
              EOF
              
              # Create Secrets
              cat <<EOF | kubectl apply -f -
              apiVersion: v1
              kind: Secret
              metadata:
                name: bytevault-secrets
              type: Opaque
              data:
                admin-password: $(echo -n "${{ secrets.ADMIN_PASSWORD }}" | base64)
                user-password: $(echo -n "${{ secrets.USER_PASSWORD }}" | base64)
              EOF

          - name: Update deployment configuration
            run: |
              cat <<EOF > k8s/deployment.yaml
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: bytevault-deployment
                labels:
                  app: bytevault
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: bytevault
                template:
                  metadata:
                    labels:
                      app: bytevault
                  spec:
                    containers:
                    - name: bytevault
                      image: ${{ steps.ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
                      ports:
                      - containerPort: 3000
                      env:
                      - name: ADMIN_USERNAME
                        valueFrom:
                          configMapKeyRef:
                            name: bytevault-config
                            key: admin-username
                      - name: USER_USERNAME
                        valueFrom:
                          configMapKeyRef:
                            name: bytevault-config
                            key: user-username
                      - name: ADMIN_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: bytevault-secrets
                            key: admin-password
                      - name: USER_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: bytevault-secrets
                            key: user-password
                      volumeMounts:
                      - name: uploads-volume
                        mountPath: /app/uploads
                    volumes:
                    - name: uploads-volume
                      emptyDir: {}
              EOF

          - name: Deploy to Kubernetes
            run: |
              kubectl apply -f k8s/deployment.yaml
              kubectl apply -f k8s/service.yaml

          - name: Verify Deployment
            run: |
              echo "Checking deployments..."
              kubectl get deployments
              
              echo "Checking services..."
              kubectl get services
              
              echo "Checking pods..."
              kubectl get pods
              
              # Wait for deployment rollout
              kubectl rollout status deployment/bytevault-deployment --timeout=300s
              
              # Get pod name and check logs
              POD_NAME=$(kubectl get pods -l app=bytevault -o jsonpath="{.items[0].metadata.name}")
              echo "Checking pod logs..."
              kubectl logs $POD_NAME

          - name: Deployment Summary
            run: |
              echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
              echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
              echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
              
              # Check deployment status
              DEPLOY_STATUS=$(kubectl get deployment bytevault-deployment -o jsonpath='{.status.conditions[?(@.type=="Available")].status}')
              if [ "$DEPLOY_STATUS" == "True" ]; then
                echo "| Deployment | ✅ Successful |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| Deployment | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
              fi
              
              # Check pod status
              POD_STATUS=$(kubectl get pods -l app=bytevault -o jsonpath='{.items[0].status.phase}')
              echo "| Pod Status | $POD_STATUS |" >> $GITHUB_STEP_SUMMARY
              
              # Check service status
              SVC_IP=$(kubectl get service bytevault-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              if [ -n "$SVC_IP" ]; then
                echo "| Service | ✅ Load Balancer Ready |" >> $GITHUB_STEP_SUMMARY
                echo "| Endpoint | $SVC_IP:3000 |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| Service | ⏳ Pending |" >> $GITHUB_STEP_SUMMARY
              fi
              
              if [[ "${{ env.SECURITY_ENABLED }}" == "true" ]]; then
                echo "| Security | ✅ Scans Completed - ${{ env.SECURITY_MODE }} mode |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| Security | ⚠️ Scans Bypassed |" >> $GITHUB_STEP_SUMMARY
              fi
